(ns relax)

(defn re-seq [re string]
  (loop [index 1
         matches []]
    (let [next-match (#*matchstr string re 0 index)]
      (if (= "" next-match)
        matches
        (recur (inc index) (conj matches next-match))))))

(defn search-for
  ([string] (search-for string "" 0))
  ([string flags] (search-for string flags 0))
  ([string flags stopline]
   (execute (str "keepjumps call search(\""
                string "\", \"" flags "\", "
                 stopline ")"))
   (#*line ".")))

(defn jump-to-line [linenum]
  (execute (str "keepjumps normal! " linenum "G")))

(defn current-class-range []
  (let [window-pos (#*winsaveview)
        curline (#*line ".")
        first-line (search-for "React.createClass" "b")]
    (execute "keepjumps normal! $%")
    (let [result [first-line (#*line ".")]]
      (jump-to-line curline)
      (#*winrestview window-pos)
      result)))

(def function-mnemonics
  {"cdm"  "componentDidMount"
   "cdup" "componentDidUpdate"
   "cwm"  "componentWillMount"
   "cwr"  "componentWillReceiveProps"
   "cwun" "componentWillUnmount"
   "cwu"  "componentWillUpdate"
   "gdp"  "getDefaultProps"
   "gis"  "getInitialState"
   "pt"   "propTypes"
   "r"    "render"
   "scu"  "shouldComponentUpdate"})

(def object? #{"propTypes"})

(def args-mappings
  {"componentDidUpdate"        "prevProps, prevState"
   "componentWillReceiveProps" "nextProps"
   "componentWillUpdate"       "nextProps, nextState"
   "shouldComponentUpdate"     "nextProps, nextState"})

(defn args-for [function-name]
  (args-mappings function-name ""))

(defn definition-for [function-name]
  (if (object? function-name)
    (str function-name ": {")
    (str function-name ": function(" (args-for function-name) ") {")))

; normal! is preferable because it ignores user mappings
(defn norm [& input] (execute (str "normal! " (join input))))

(defn parse-props [proptypes-method]
  (if proptypes-method
    (let [proplines (join (#*getline (inc (:start-line proptypes-method))
                                     (:end-line proptypes-method)))
          without-nested (#*substitute proplines #"\{.{-}\}" "" "g")]
      (re-seq #"<\w+\ze:" without-nested))
    #{}))

(defn method-with-name [methods name-to-find]
  (first (filter #(= (:name %) name-to-find) methods)))

(defn parse-class []
  (let [begin-state (#*winsaveview)
        [first-line last-line] (current-class-range)]
    (jump-to-line first-line)
    (norm "j")
    (loop [methods []]
          (let [search-result (#*search #"(\w+: function|propTypes:)" "W")]
          (do
            (if (and (nonzero? search-result) (< (#*line ".") last-line))
              (let [cword (#*expand "<cword>")
                    lnum (#*line ".")]
                (execute "keepjumps normal! $%")
                (recur (conj methods
                             {:name cword
                              :start-line lnum
                              :end-line (dec (#*line "."))}
                             )))
              (let [last-method (last methods)
                    without-last (butlast methods)
                    marked-as-last (conj last-method [:is-last true])
                    methods (conj without-last marked-as-last)]
                (#*winrestview begin-state)
                {:methods methods
                 :props (parse-props (method-with-name methods "propTypes"))
                 :first-line first-line
                 :last-line last-line})))))))

; The commented out function below uses the react snippets
; TODO: check if they are available and use
; them instead
; (defn create-method [class mnemonic]
;   (jump-to-line (:first-line class))
;   (#*feedkeys (str "o" mnemonic "\<tab>") "m"))

(defn create-method [class mnemonic enter-insert]
  (let [fname (function-mnemonics mnemonic)]
    (jump-to-line (:first-line class))
    (norm (str "o" (definition-for fname) "\<CR>},\<CR>\<ESC>kk"))
    (when enter-insert (#*feedkeys "o" "n"))))

(defn jump
  ([bang _]
   (let [class (parse-class)]
     (jump-to-line (:first-line class))))
  ([bang enter-insert mnemonic]
   (let [begin-state (#*winsaveview)
         is-bang (not (zero? bang)) ; since this is created by vim equality
         class (parse-class)
         fname (function-mnemonics mnemonic)
         methods (filter #(= (:name %) fname) (:methods class))
         found (not (empty? methods))]
     (when found
       ; we want to add the original point to the jump list
       (#*winrestview begin-state)
       (norm "m'")
       (jump-to-line (:start-line (first methods)))
       (norm "zz"))
     (when-not found
       (when-not is-bang
         (echo
           (str "Did not find " fname " in this class, call with ! to create."))
         (#*winrestview begin-state))
       (when is-bang (create-method class mnemonic enter-insert))))))

(defn jump-to-or-create [bang & args]
  (apply jump bang true args))

(defn method-containing-line [class lnum]
  (let [methods (:methods class)
        valid-methods (filter #(<= (:start-line %) lnum (:end-line %))
                              methods)]
    (if-not (empty? valid-methods)
      (first valid-methods))))


(defn add-to-jump-list []
  (norm "m'"))

(defn create-method-after-current
  [class method-name]
  (let [this-method (method-containing-line class (#*line "."))
        ending-line (:end-line this-method)
        command (str (if (:is-last this-method) "A,\<ESC>" "")
                     "o\<CR>" method-name ": function() {\<CR>}"
                     (if (:is-last this-method) "" ","))]
    (jump-to-line ending-line)
    (norm command)
    (norm "O")))

(defn parse-and-jump-to-handler []
  (let [begin-state (#*winsaveview)
        class (parse-class)
        fname (first (re-find #"\{this\.\zs.*\ze\}" (#*expand "<cWORD>")))
        method (first (filter #(= (:name %) fname) (:methods class)))]
    (if-not fname
      (echo "You don't seem to be on a handler")
      (if method
        (do (#*winrestview begin-state)
            (add-to-jump-list)
            (jump-to-line (:start-line method)))
        (create-method-after-current class fname)
        ))))

(defn handler-jump []
  (parse-and-jump-to-handler))

(defn set-difference [a b]
  (apply disj a b))

(defn gen-proptypes []
  (let [class (parse-class)
        class-lines (#*getline (:first-line class) (:last-line class))
        class-contents (#*join class-lines)
        props (set (re-seq #"this\.props\.\zs\w+" class-contents))
        existing-props (set (:props class))
        props-to-create (set-difference props existing-props)]
    (jump 1 false "pt")
    (norm "$%k")
    (let [top-prop (inc (#*line "."))]
      (when (and (not (empty? existing-props))
                 (not (empty? props-to-create))
                 (not (re-find #",\s*$" (#*getline "."))))
        (norm "A,"))
      (doall (map #(norm (str "o" % ": React.PropTypes.string,"))
                  props-to-create))
      ; remove the last comma
      (when-not (empty? props-to-create)
        (norm "A\<BS>"))
      (jump-to-line top-prop))))
